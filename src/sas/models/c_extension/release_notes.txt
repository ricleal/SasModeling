Release Notes
=============

SANS Models version 0.4.3

Package name: sas.models 

1- What's New in Version 0.4.3
    - Release date: April 21, 2009
    - C extension models now use new C++ classes that incorporate dispersity and averaging
      functionality. See utest_dispersity.py for examples of how to use the new dispersion
      classes.
      
      # Create a model
      model= CylinderModel()
      
      # Create a dispersion model
      disp = GaussianDispersion()
      
	  # Set the dispersion for a chosen parameter
	  model.set_dispersion('radius', disp)
	  
	  # Set the parameters of the dispersion model
      model.dispersion['radius']['width'] = 5.0
      model.dispersion['radius']['npts'] = 100


    Version 0.4.3
    -P(Q)*S(Q) added for P(Q)=cylinder, sphere, ellipsoid
    -Array dispersion (user defined) added

    Version 0.4.2
    -4 Structure factors added
    
    Version 0.4.1
    - Release date: 6/9/2008
    - Modified non-shape models so that the 2D output is the 1D output for the length of Q

    Version 0.4.0
	- Release date: 4/15/2008
	- Added shape-independent models.
	
	Version 0.3.2:
	- Release date: 2/14/2008
	- Added models to be used in magnetic analysis.


2- Downloading and Installing

	2.1- System Requirements:
		- Python version >= 2.5 and < 3.0 should be running on the system


	2.2- Installing:
		- Get the code from svn://danse.us/sans/releases/sansmodels-0.4.3
		- Execute the following: 
			python setup.py install

3- Known Issues

	3.1- All systems:
		- Q range validity of I(q) calculations.
			Our 1D models of I(q) use the function of the NCNR library 
			for their IGOR package (Klein, 2006). That library uses a
			fast integration technique in some of its models (cylinders
			and ellipsoids). Integration is done using 76 points in the
			angle between the axis of the object and the q-vector, which
			translates in a larger inaccuracy at high q. Integratiing
			the 2D model I(q,phi) over all orientations of the object
			will not yield the exact same result as the NCNR calculation
			for q > 0.3 A-1.
		- Refactoring needs to be done to update the model base class.
		  We should get rid of the useless arithmetics and store the parameters
		  as class objects rather than values. This would eliminate the multitude
		  of dictionaries needed to store all the various aspects of a parameter
		  (limits, units, dispersity information). The C++ design it relies
		  on is much cleaner in that respect, but it still depends on the old
		  C computation. Those should be incorporated in the C++ classes.

	3.2- Windows:
		- None

	3.3- Linux:
		- None

4- Troubleshooting

	- None

5- Frequently Asked Questions

	- None

6- Other Resources

	- See: http://danse.us/trac/sans/wiki/8_2_2_1DModelFitting
	- See: http://danse.us/trac/sans/wiki/8_2_3_2DModeling
	- See: http://danse.us/trac/sans/wiki/8_2_6_model_extensions
	- See: http://danse.us/trac/sans/wiki/8_2_1Nonshape_models

	

	



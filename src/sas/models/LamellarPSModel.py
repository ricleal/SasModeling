##############################################################################
# This software was developed by the University of Tennessee as part of the
# Distributed Data Analysis of Neutron Scattering Experiments (DANSE)
# project funded by the US National Science Foundation.
#
# If you use DANSE applications to do scientific research that leads to
# publication, we ask that you acknowledge the use of the software with the
# following sentence:
#
# This work benefited from DANSE software developed under NSF award DMR-0520547
#
# Copyright 2008-2011, University of Tennessee
##############################################################################

""" 
Provide functionality for a C extension model

.. WARNING::

   THIS FILE WAS GENERATED BY WRAPPERGENERATOR.PY
   DO NOT MODIFY THIS FILE, MODIFY
   src/sas/models/include/lamellarPS.h
   AND RE-RUN THE GENERATOR SCRIPT
"""

from sas.models.BaseComponent import BaseComponent
from sas.models.sans_extension.c_models import CLamellarPSModel

def create_LamellarPSModel():
    """
       Create a model instance
    """
    obj = LamellarPSModel()
    # CLamellarPSModel.__init__(obj) is called by
    # the LamellarPSModel constructor
    return obj

class LamellarPSModel(CLamellarPSModel, BaseComponent):
    """ 
    Class that evaluates a LamellarPSModel model. 
    This file was auto-generated from src/sas/models/include/lamellarPS.h.
    Refer to that file and the structure it contains
    for details of the model.
    
    List of default parameters:

    * scale           = 1.0 
    * spacing         = 400.0 [A]
    * delta           = 30.0 [A]
    * sld_bi          = 6.3e-06 [1/A^(2)]
    * sld_sol         = 1e-06 [1/A^(2)]
    * n_plates        = 20.0 
    * caille          = 0.1 
    * background      = 0.0 [1/cm]

    """
        
    def __init__(self, multfactor=1):
        """ Initialization """
        self.__dict__ = {}
        
        # Initialize BaseComponent first, then sphere
        BaseComponent.__init__(self)
        #apply(CLamellarPSModel.__init__, (self,)) 

        CLamellarPSModel.__init__(self)
        self.is_multifunc = False
		        
        ## Name of the model
        self.name = "LamellarPSModel"
        ## Model description
        self.description = """
        [Concentrated Lamellar Form Factor] Calculates the scattered
		intensity from a lyotropic lamellar phase.
		The intensity (form factor and structure
		factor)calculated is for lamellae of
		uniform scattering length density that
		are randomly distributed in solution
		(a powder average). The lamellae thickness
		is polydisperse. The model can also
		be applied to large, multi-lamellar vesicles.
		No resolution smeared version is included
		in the structure factor of this model.
		*Parameters: spacing = repeat spacing,
		delta = bilayer thickness,
		sld_bi = SLD_bilayer
		sld_sol = SLD_solvent
		n_plate = # of Lamellar plates
		caille = Caille parameter (<0.8 or <1)
		background = incoherent bgd
		scale = scale factor
        """
       
        ## Parameter details [units, min, max]
        self.details = {}
        self.details['scale'] = ['', None, None]
        self.details['spacing'] = ['[A]', None, None]
        self.details['delta'] = ['[A]', None, None]
        self.details['sld_bi'] = ['[1/A^(2)]', None, None]
        self.details['sld_sol'] = ['[1/A^(2)]', None, None]
        self.details['n_plates'] = ['', None, None]
        self.details['caille'] = ['', None, None]
        self.details['background'] = ['[1/cm]', None, None]

        ## fittable parameters
        self.fixed = ['delta.width',
                      'spacing.width']
        
        ## non-fittable parameters
        self.non_fittable = []
        
        ## parameters with orientation
        self.orientation_params = []

        ## parameters with magnetism
        self.magnetic_params = []

        self.category = None
        self.multiplicity_info = None
        
    def __setstate__(self, state):
        """
        restore the state of a model from pickle
        """
        self.__dict__, self.params, self.dispersion = state
        
    def __reduce_ex__(self, proto):
        """
        Overwrite the __reduce_ex__ of PyTypeObject *type call in the init of 
        c model.
        """
        state = (self.__dict__, self.params, self.dispersion)
        return (create_LamellarPSModel, tuple(), state, None, None)
        
    def clone(self):
        """ Return a identical copy of self """
        return self._clone(LamellarPSModel())   
       	
    def run(self, x=0.0):
        """ 
        Evaluate the model
        
        :param x: input q, or [q,phi]
        
        :return: scattering function P(q)
        
        """
        return CLamellarPSModel.run(self, x)
   
    def runXY(self, x=0.0):
        """ 
        Evaluate the model in cartesian coordinates
        
        :param x: input q, or [qx, qy]
        
        :return: scattering function P(q)
        
        """
        return CLamellarPSModel.runXY(self, x)
        
    def evalDistribution(self, x):
        """ 
        Evaluate the model in cartesian coordinates
        
        :param x: input q[], or [qx[], qy[]]
        
        :return: scattering function P(q[])
        
        """
        return CLamellarPSModel.evalDistribution(self, x)
        
    def calculate_ER(self):
        """ 
        Calculate the effective radius for P(q)*S(q)
        
        :return: the value of the effective radius
        
        """       
        return CLamellarPSModel.calculate_ER(self)
        
    def calculate_VR(self):
        """ 
        Calculate the volf ratio for P(q)*S(q)
        
        :return: the value of the volf ratio
        
        """       
        return CLamellarPSModel.calculate_VR(self)
              
    def set_dispersion(self, parameter, dispersion):
        """
        Set the dispersion object for a model parameter
        
        :param parameter: name of the parameter [string]
        :param dispersion: dispersion object of type DispersionModel
        
        """
        return CLamellarPSModel.set_dispersion(self,
               parameter, dispersion.cdisp)
        
   
# End of file

